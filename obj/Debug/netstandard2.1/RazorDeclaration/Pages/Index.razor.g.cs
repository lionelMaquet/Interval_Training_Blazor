#pragma checksum "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4431314a5f1133538158edd71c58fb7766405a09"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Interval_Training.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Interval_Training;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Interval_Training.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using System.Timers;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 91 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
       

    string PreviousPhaseString = "<";
    string NextPhaseString = ">";

    // All infos needed for displaying timer 
    int CurrentStepIndex = -1;
    int CurrentStepSeconds;
    int CurrentStepSpeed;
    int NextStepSeconds;
    int NextStepSpeed;
    string CurrentStepTimerDisplayString
    {
        get
        {
            TimeSpan time = TimeSpan.FromSeconds(CurrentStepSeconds);

            //here backslash is must to tell that colon is
            //not the part of format, it just a character that we want in output
            return time.ToString(@"mm\:ss");
        }
    }
    string NextStepTimerDisplayString
    {
        get
        {
            TimeSpan time = TimeSpan.FromSeconds(NextStepSeconds);

            //here backslash is must to tell that colon is
            //not the part of format, it just a character that we want in output
            return time.ToString(@"mm\:ss");
        }
    }

    int phase = 0; // 0 warmup - 1 training - 2 cooling - 3 IN PROGRESS - 4 Training complete
    string CurrentPhaseTitle
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return "Warmup steps";
                case 1:
                    return "Training steps";
                case 2:
                    return "Cooling steps";
                case 3:
                    return "Training";
                case 4:
                    return "It's over. Well done.";
                default:
                    return "";
            }
        }
    }

    int TotalTime
    {
        get
        {
            return WarmupTime + TrainingTime + CoolingTime;
        }
    }
    Double TotalDistance
    {
        get
        {
            return WarmupDistance + TrainingDistance + CoolingDistance;
        }
    }
    List<Step> AllSteps
    {
        get
        {
            List<Step> warmupSteps = new List<Step>();
            List<Step> trainingSteps = new List<Step>();
            List<Step> coolingSteps = new List<Step>();
            List<Step> allSteps = new List<Step>();

            allSteps.Add(WarmupSteps[0]);

            for (int i = 1; i < WarmupSteps.Count; i++)
            {
                int currentCounter = WarmupStepReps[i - 1].reps;
                while (currentCounter != 0)
                {
                    allSteps.Add(WarmupSteps[i]);
                    currentCounter--;

                    if (currentCounter != 0)
                    {
                        allSteps.Add(WarmupSteps[i - 1]);
                    }
                }
            } // add all warmup steps

            allSteps.Add(TrainingSteps[0]);

            for (int i = 1; i < TrainingSteps.Count; i++)
            {
                int currentCounter = TrainingStepReps[i - 1].reps;
                while (currentCounter != 0)
                {
                    allSteps.Add(TrainingSteps[i]);
                    currentCounter--;

                    if (currentCounter != 0)
                    {
                        allSteps.Add(TrainingSteps[i - 1]);
                    }
                }
            } // add all training steps

            allSteps.Add(CoolingSteps[0]);

            for (int i = 1; i < CoolingSteps.Count; i++)
            {
                int currentCounter = CoolingStepReps[i - 1].reps;
                while (currentCounter != 0)
                {
                    allSteps.Add(CoolingSteps[i]);
                    currentCounter--;

                    if (currentCounter != 0)
                    {
                        allSteps.Add(CoolingSteps[i - 1]);
                    }
                }
            } // add all cooling steps

            return allSteps;

        }
    }

    List<Step> WarmupSteps = new List<Step>() { new Step() };
    List<StepRep> WarmupStepReps = new List<StepRep>() { };
    int WarmupTime
    {
        get
        {


            if (WarmupSteps.Count == 1 || WarmupStepReps.Count == 0)
            {
                return WarmupSteps[0].CurrentMinutes;
            }

            int total = WarmupSteps[0].CurrentMinutes * WarmupStepReps[0].reps;

            for (int i = 1; i < WarmupSteps.Count; i++)
            {
                total += WarmupSteps[i].CurrentMinutes * WarmupStepReps[i - 1].reps;
            }
            return total;

        }
    }
    Double WarmupDistance
    {
        get
        {
            if (WarmupSteps.Count == 1 || WarmupStepReps.Count == 0)
            {
                return ((double)WarmupSteps[0].CurrentSpeed / 60.0) * WarmupSteps[0].CurrentMinutes;
            }

            Double total = (double)((double)(WarmupSteps[0].CurrentSpeed / 60.0) * (double)WarmupSteps[0].CurrentMinutes) * (double)WarmupStepReps[0].reps;

            for (int i = 1; i < WarmupSteps.Count; i++)
            {
                total += (double)((double)(WarmupSteps[i].CurrentSpeed / 60.0) * (double)WarmupSteps[i].CurrentMinutes) * (double)WarmupStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> TrainingSteps = new List<Step>() { new Step() };
    List<StepRep> TrainingStepReps = new List<StepRep>() { };
    int TrainingTime
    {
        get
        {
            if (TrainingSteps.Count == 1 || TrainingStepReps.Count == 0)
            {
                return TrainingSteps[0].CurrentMinutes;
            }

            int total = TrainingSteps[0].CurrentMinutes * TrainingStepReps[0].reps;

            for (int i = 1; i < TrainingSteps.Count; i++)
            {
                total += TrainingSteps[i].CurrentMinutes * TrainingStepReps[i - 1].reps;
            }
            return total;
        }
    }
    Double TrainingDistance
    {
        get
        {
            if (TrainingSteps.Count == 1 || TrainingStepReps.Count == 0)
            {
                return ((double)TrainingSteps[0].CurrentSpeed / 60.0) * TrainingSteps[0].CurrentMinutes;
            }

            Double total = (double)((double)(TrainingSteps[0].CurrentSpeed / 60.0) * (double)TrainingSteps[0].CurrentMinutes) * (double)TrainingStepReps[0].reps;

            for (int i = 1; i < TrainingSteps.Count; i++)
            {
                total += (double)((double)(TrainingSteps[i].CurrentSpeed / 60.0) * (double)TrainingSteps[i].CurrentMinutes) * (double)TrainingStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> CoolingSteps = new List<Step>() { new Step() };
    List<StepRep> CoolingStepReps = new List<StepRep>() { };
    int CoolingTime
    {
        get
        {
            if (CoolingSteps.Count == 1 || CoolingStepReps.Count == 0)
            {
                return CoolingSteps[0].CurrentMinutes;
            }

            int total = CoolingSteps[0].CurrentMinutes * CoolingStepReps[0].reps;

            for (int i = 1; i < CoolingSteps.Count; i++)
            {
                total += CoolingSteps[i].CurrentMinutes * CoolingStepReps[i - 1].reps;
            }
            return total;
        }
    }
    Double CoolingDistance
    {
        get
        {
            if (CoolingSteps.Count == 1 || CoolingStepReps.Count == 0)
            {
                return ((double)CoolingSteps[0].CurrentSpeed / 60.0) * CoolingSteps[0].CurrentMinutes;
            }

            Double total = (double)((double)(CoolingSteps[0].CurrentSpeed / 60.0) * (double)CoolingSteps[0].CurrentMinutes) * (double)CoolingStepReps[0].reps;

            for (int i = 1; i < CoolingSteps.Count; i++)
            {
                total += (double)((double)(CoolingSteps[i].CurrentSpeed / 60.0) * (double)CoolingSteps[i].CurrentMinutes) * (double)CoolingStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> CurrentPhaseSteps
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupSteps;
                case 1:
                    return TrainingSteps;
                case 2:
                    return CoolingSteps;
                default:
                    return WarmupSteps;
            }
        }
    }
    List<StepRep> CurrentPhaseStepReps
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupStepReps;
                case 1:
                    return TrainingStepReps;
                case 2:
                    return CoolingStepReps;
                default:
                    return WarmupStepReps;
            }
        }
    }
    int CurrentPhaseTime
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupTime;
                case 1:
                    return TrainingTime;
                case 2:
                    return CoolingTime;
                default:
                    return WarmupTime;
            }
        }
    }
    Double CurrentPhaseDistance
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupDistance;
                case 1:
                    return TrainingDistance;
                case 2:
                    return CoolingDistance;
                default:
                    return WarmupDistance;
            }
        }
    }

    private void AddStep()
    {

        switch (phase)
        {
            case 0:
                WarmupSteps.Add(new Step());
                WarmupStepReps.Add(new StepRep());
                break;
            case 1:
                TrainingSteps.Add(new Step());
                TrainingStepReps.Add(new StepRep());
                break;
            case 2:
                CoolingSteps.Add(new Step());
                CoolingStepReps.Add(new StepRep());
                break;
            default:
                break;
        }

    }
    private void RemoveStep()
    {
        switch (phase)
        {
            case 0:
                if (WarmupSteps.Count != 1)
                {
                    WarmupSteps.RemoveAt(WarmupSteps.Count - 1);
                    WarmupStepReps.RemoveAt(WarmupStepReps.Count - 1);
                }
                break;
            case 1:
                if (TrainingSteps.Count != 1)
                {
                    TrainingSteps.RemoveAt(TrainingSteps.Count - 1);
                    TrainingStepReps.RemoveAt(TrainingStepReps.Count - 1);
                }
                break;
            case 2:
                if (CoolingSteps.Count != 1)
                {
                    CoolingSteps.RemoveAt(CoolingSteps.Count - 1);
                    CoolingStepReps.RemoveAt(CoolingStepReps.Count - 1);
                }
                break;
            default:
                break;
        }
    }
    private void PreviousPhase()
    {
        if (phase != 0)
        {
            phase--;
        }
    }
    private void NextPhase()
    {
        if (phase != 4)
        {
            phase++;
        }
    }

    // Timer creation, initialization and updates
    System.Timers.Timer aTimer = new System.Timers.Timer();
    protected override void OnInitialized()
    {
        aTimer.Elapsed += new ElapsedEventHandler(UpdateTimer);
        aTimer.Interval = 1000;

    }
    bool TimerIsOver = false;
    private void StartStop()
    {

        if (TimerIsOver)
        {
            TimerIsOver = false;
            ResetTimer();
            aTimer.Enabled = true;
            this.StateHasChanged();
        }
        else
        {
            aTimer.Enabled = !aTimer.Enabled;
            this.StateHasChanged();
        }

    }
    private void ResetTimer()
    {
        CurrentStepIndex = 0;
        CurrentStepSeconds = AllSteps[0].CurrentMinutes * 60;
        CurrentStepSpeed = AllSteps[0].CurrentSpeed;

        NextStepSeconds = AllSteps[1].CurrentMinutes * 60;
        NextStepSpeed = AllSteps[1].CurrentSpeed;
    }
    private void UpdateTimer(object source, ElapsedEventArgs e)
    {
        if (CurrentStepIndex == -1) // initialize
        {
            ResetTimer();
        }

        else
        {
            if (CurrentStepSeconds == 0)
            {

                if (CurrentStepIndex == AllSteps.Count - 1)
                {
                    TimerIsOver = true;
                    phase++;
                    aTimer.Enabled = !aTimer.Enabled;
                    this.StateHasChanged();

                } else
                {
                    CurrentStepIndex++;
                    CurrentStepSeconds = AllSteps[CurrentStepIndex].CurrentMinutes * 60;
                    CurrentStepSpeed = AllSteps[CurrentStepIndex].CurrentSpeed;

                    NextStepSeconds = AllSteps[CurrentStepIndex + 1].CurrentMinutes * 60;
                    NextStepSpeed = AllSteps[CurrentStepIndex + 1].CurrentSpeed;
                }


            }

            else
            {
                CurrentStepSeconds--;
            }
        }

        this.StateHasChanged();
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
