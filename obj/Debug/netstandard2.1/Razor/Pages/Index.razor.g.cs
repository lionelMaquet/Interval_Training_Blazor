#pragma checksum "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "61174090acc7bab365447a8ac04e32f697178a76"
// <auto-generated/>
#pragma warning disable 1591
namespace Interval_Training.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Interval_Training;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Interval_Training.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "h1");
            __builder.AddContent(1, 
#nullable restore
#line 3 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
     CurrentPhaseTitle

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(2, "\r\n\r\n");
            __builder.OpenElement(3, "div");
            __builder.AddAttribute(4, "class", "StepsAndRepsContainer");
            __builder.AddMarkupContent(5, "\r\n\r\n");
#nullable restore
#line 7 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
     for (int i = 0; i < @CurrentPhaseSteps.Count; i++)
    {

        int iCopy = i; // https://stackoverflow.com/questions/56425558/blazor-variable-argument-passing-to-onclick-function/56426146#56426146

        if (i != 0)
        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(6, "            ");
            __builder.OpenElement(7, "div");
            __builder.AddAttribute(8, "class", "rep");
            __builder.AddMarkupContent(9, "\r\n                ");
            __builder.AddMarkupContent(10, "<p>X </p>\r\n                ");
            __builder.OpenElement(11, "input");
            __builder.AddAttribute(12, "type", "number");
            __builder.AddAttribute(13, "value", 
#nullable restore
#line 16 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                             CurrentPhaseStepReps[i - 1].reps

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(14, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 16 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                                            e => CurrentPhaseStepReps[iCopy - 1].reps = int.Parse(e.Value.ToString())

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(15, "\r\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(16, "\r\n");
#nullable restore
#line 18 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
        }


#line default
#line hidden
#nullable disable
            __builder.AddContent(17, "        ");
            __builder.OpenElement(18, "div");
            __builder.AddAttribute(19, "class", "step");
            __builder.AddMarkupContent(20, "\r\n            ");
            __builder.OpenElement(21, "div");
            __builder.AddAttribute(22, "class", "stepTime");
            __builder.AddMarkupContent(23, "\r\n                ");
            __builder.OpenElement(24, "input");
            __builder.AddAttribute(25, "type", "number");
            __builder.AddAttribute(26, "value", 
#nullable restore
#line 22 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                             CurrentPhaseSteps[i].CurrentMinutes

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(27, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 22 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                                               e => CurrentPhaseSteps[iCopy].CurrentMinutes = int.Parse(e.Value.ToString())

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(28, "\r\n                ");
            __builder.AddMarkupContent(29, "<p> min</p>\r\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(30, "\r\n            ");
            __builder.OpenElement(31, "div");
            __builder.AddAttribute(32, "class", "stepSpeed");
            __builder.AddMarkupContent(33, "\r\n                ");
            __builder.OpenElement(34, "input");
            __builder.AddAttribute(35, "type", "number");
            __builder.AddAttribute(36, "value", 
#nullable restore
#line 26 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                             CurrentPhaseSteps[i].CurrentSpeed

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(37, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 26 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                                             e => CurrentPhaseSteps[iCopy].CurrentSpeed = int.Parse(e.Value.ToString())

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(38, "\r\n                ");
            __builder.AddMarkupContent(39, "<p> km/h</p>\r\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(40, "\r\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(41, "\r\n");
#nullable restore
#line 30 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(42, "\r\n\r\n");
            __builder.OpenElement(43, "div");
            __builder.AddAttribute(44, "class", "phaseInfos");
            __builder.AddMarkupContent(45, "\r\n    ");
            __builder.AddMarkupContent(46, "<p><strong>Current phase : </strong> </p>\r\n    ");
            __builder.OpenElement(47, "p");
            __builder.AddContent(48, 
#nullable restore
#line 35 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
        CurrentPhaseTime.ToString()

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(49, " minutes");
            __builder.CloseElement();
            __builder.AddMarkupContent(50, "\r\n    ");
            __builder.OpenElement(51, "p");
            __builder.AddContent(52, 
#nullable restore
#line 36 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
        Math.Round(CurrentPhaseDistance, 2).ToString()

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(53, " kms");
            __builder.CloseElement();
            __builder.AddMarkupContent(54, "\r\n");
            __builder.CloseElement();
            __builder.AddMarkupContent(55, "\r\n\r\n");
            __builder.OpenElement(56, "div");
            __builder.AddAttribute(57, "class", "phaseInfos");
            __builder.AddMarkupContent(58, "\r\n    ");
            __builder.AddMarkupContent(59, "<p><strong>Total : </strong> </p>\r\n    ");
            __builder.OpenElement(60, "p");
            __builder.AddContent(61, 
#nullable restore
#line 41 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
        TotalTime.ToString()

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(62, " minutes");
            __builder.CloseElement();
            __builder.AddMarkupContent(63, "\r\n    ");
            __builder.OpenElement(64, "p");
            __builder.AddContent(65, 
#nullable restore
#line 42 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
        Math.Round(TotalDistance, 2).ToString()

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(66, " kms ");
            __builder.CloseElement();
            __builder.AddMarkupContent(67, "\r\n");
            __builder.CloseElement();
            __builder.AddMarkupContent(68, "\r\n\r\n\r\n");
            __builder.OpenElement(69, "div");
            __builder.AddAttribute(70, "class", "buttons");
            __builder.AddMarkupContent(71, "\r\n    ");
            __builder.OpenElement(72, "button");
            __builder.AddAttribute(73, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 47 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                      PreviousPhase

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(74, "Previous Phase");
            __builder.CloseElement();
            __builder.AddMarkupContent(75, "\r\n    ");
            __builder.OpenElement(76, "button");
            __builder.AddAttribute(77, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 48 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                      AddStep

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(78, "Add Step");
            __builder.CloseElement();
            __builder.AddMarkupContent(79, "\r\n    ");
            __builder.OpenElement(80, "button");
            __builder.AddAttribute(81, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 49 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                      NextPhase

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(82, "Next Phase");
            __builder.CloseElement();
            __builder.AddMarkupContent(83, "\r\n");
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 53 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
       



    int phase = 0; // 0 warmup - 1 training - 2 cooling


    string CurrentPhaseTitle
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return "Warmup phase";
                case 1:
                    return "Training phase";
                case 2:
                    return "Cooling phase";
                default:
                    return "";
            }
        }
    }

    int TotalTime
    {
        get
        {
            return WarmupTime + TrainingTime + CoolingTime ;
        }
    }
    Double TotalDistance
    {
        get
        {
            return WarmupDistance + TrainingDistance + CoolingDistance;
        }
    }

    List<Step> WarmupSteps = new List<Step>() { new Step() };
    List<StepRep> WarmupStepReps = new List<StepRep>() { };
    int WarmupTime
    {
        get
        {


            if (WarmupSteps.Count == 1 || WarmupStepReps.Count == 0)
            {
                return WarmupSteps[0].CurrentMinutes;
            }

            int total = WarmupSteps[0].CurrentMinutes * WarmupStepReps[0].reps;

            for (int i = 1; i < WarmupSteps.Count; i++)
            {
                total += WarmupSteps[i].CurrentMinutes * WarmupStepReps[i - 1].reps;
            }
            return total;

        }
    }
    Double WarmupDistance
    {
        get
        {
            if (WarmupSteps.Count == 1 || WarmupStepReps.Count == 0)
            {
                return ((double) WarmupSteps[0].CurrentSpeed/60.0) * WarmupSteps[0].CurrentMinutes ;
            }

            Double total = (double) ((double)(WarmupSteps[0].CurrentSpeed/60.0) * (double) WarmupSteps[0].CurrentMinutes) *  (double) WarmupStepReps[0].reps;

            for (int i = 1; i < WarmupSteps.Count; i++)
            {
                total += (double) ((double)( WarmupSteps[i].CurrentSpeed/ 60.0) * (double) WarmupSteps[i].CurrentMinutes) * (double) WarmupStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> TrainingSteps = new List<Step>() { new Step() };
    List<StepRep> TrainingStepReps = new List<StepRep>() { };
    int TrainingTime
    {
        get
        {
            if (TrainingSteps.Count == 1 || TrainingStepReps.Count == 0)
            {
                return TrainingSteps[0].CurrentMinutes;
            }

            int total = TrainingSteps[0].CurrentMinutes * TrainingStepReps[0].reps;

            for (int i = 1; i < TrainingSteps.Count; i++)
            {
                total += TrainingSteps[i].CurrentMinutes * TrainingStepReps[i - 1].reps;
            }
            return total;
        }
    }
    Double TrainingDistance
    {
        get
        {
            if (TrainingSteps.Count == 1 || TrainingStepReps.Count == 0)
            {
                return ((double)TrainingSteps[0].CurrentSpeed / 60.0) * TrainingSteps[0].CurrentMinutes;
            }

            Double total = (double) ((double)(TrainingSteps[0].CurrentSpeed / 60.0) * (double) TrainingSteps[0].CurrentMinutes) * (double) TrainingStepReps[0].reps;

            for (int i = 1; i < TrainingSteps.Count; i++)
            {
                total += (double) ((double)(TrainingSteps[i].CurrentSpeed / 60.0) * (double) TrainingSteps[i].CurrentMinutes) * (double) TrainingStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> CoolingSteps = new List<Step>() { new Step() };
    List<StepRep> CoolingStepReps = new List<StepRep>() { };
    int CoolingTime
    {
        get
        {
            if (CoolingSteps.Count == 1 || CoolingStepReps.Count == 0)
            {
                return CoolingSteps[0].CurrentMinutes;
            }

            int total = CoolingSteps[0].CurrentMinutes * CoolingStepReps[0].reps;

            for (int i = 1; i < CoolingSteps.Count; i++)
            {
                total += CoolingSteps[i].CurrentMinutes * CoolingStepReps[i - 1].reps;
            }
            return total;
        }
    }
    Double CoolingDistance
    {
        get
        {
            if (CoolingSteps.Count == 1 || CoolingStepReps.Count == 0)
            {
                return ((double)CoolingSteps[0].CurrentSpeed / 60.0) * CoolingSteps[0].CurrentMinutes;
            }

            Double total = (double)((double)(CoolingSteps[0].CurrentSpeed / 60.0) * (double) CoolingSteps[0].CurrentMinutes) * (double) CoolingStepReps[0].reps;

            for (int i = 1; i < CoolingSteps.Count; i++)
            {
                total += (double) ((double)(CoolingSteps[i].CurrentSpeed / 60.0) * (double) CoolingSteps[i].CurrentMinutes) * (double) CoolingStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> CurrentPhaseSteps
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupSteps;
                case 1:
                    return TrainingSteps;
                case 2:
                    return CoolingSteps;
                default:
                    return WarmupSteps;
            }
        }
    }
    List<StepRep> CurrentPhaseStepReps
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupStepReps;
                case 1:
                    return TrainingStepReps;
                case 2:
                    return CoolingStepReps;
                default:
                    return WarmupStepReps;
            }
        }
    }
    int CurrentPhaseTime
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupTime;
                case 1:
                    return TrainingTime;
                case 2:
                    return CoolingTime;
                default:
                    return WarmupTime;
            }
        }
    }
    Double CurrentPhaseDistance
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupDistance;
                case 1:
                    return TrainingDistance;
                case 2:
                    return CoolingDistance;
                default:
                    return WarmupDistance;
            }
        }
    }

    private void AddStep()
    {

        switch (phase)
        {
            case 0:
                WarmupSteps.Add(new Step());
                WarmupStepReps.Add(new StepRep());
                break;
            case 1:
                TrainingSteps.Add(new Step());
                TrainingStepReps.Add(new StepRep());
                break;
            case 2:
                CoolingSteps.Add(new Step());
                CoolingStepReps.Add(new StepRep());
                break;
            default:
                break;
        }

    }
    private void PreviousPhase()
    {
        if (phase != 0)
        {
            phase--;
        }
    }
    private void NextPhase()
    {
        if (phase != 3)
        {
            phase++;
        }
    }

    private void StartTraining() { }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
