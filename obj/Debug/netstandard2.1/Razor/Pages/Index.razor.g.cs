#pragma checksum "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4431314a5f1133538158edd71c58fb7766405a09"
// <auto-generated/>
#pragma warning disable 1591
namespace Interval_Training.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Interval_Training;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using Interval_Training.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\lione\Desktop\Side Projects\Interval_Training\_Imports.razor"
using System.Timers;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "h1");
            __builder.AddAttribute(1, "class", "PhaseTitle");
            __builder.AddContent(2, 
#nullable restore
#line 3 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                        CurrentPhaseTitle

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(3, "\r\n\r\n");
#nullable restore
#line 5 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
 if (phase < 3)
{


#line default
#line hidden
#nullable disable
            __builder.AddContent(4, "    ");
            __builder.OpenElement(5, "div");
            __builder.AddAttribute(6, "class", "StepsAndRepsContainer");
            __builder.AddMarkupContent(7, "\r\n\r\n");
#nullable restore
#line 10 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
         for (int i = 0; i < @CurrentPhaseSteps.Count; i++)
        {

            int iCopy = i; // https://stackoverflow.com/questions/56425558/blazor-variable-argument-passing-to-onclick-function/56426146#56426146

            if (i != 0)
            {

#line default
#line hidden
#nullable disable
            __builder.AddContent(8, "                ");
            __builder.OpenElement(9, "div");
            __builder.AddAttribute(10, "class", "rep");
            __builder.AddMarkupContent(11, "\r\n                    ");
            __builder.AddMarkupContent(12, "<p class=\"MultiplierX\">X </p>\r\n                    ");
            __builder.OpenElement(13, "input");
            __builder.AddAttribute(14, "type", "number");
            __builder.AddAttribute(15, "value", 
#nullable restore
#line 19 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                 CurrentPhaseStepReps[i - 1].reps

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(16, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 19 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                                                e => CurrentPhaseStepReps[iCopy - 1].reps = int.Parse(e.Value.ToString())

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(17, "\r\n                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(18, "\r\n");
#nullable restore
#line 21 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
            }


#line default
#line hidden
#nullable disable
            __builder.AddContent(19, "            ");
            __builder.OpenElement(20, "div");
            __builder.AddAttribute(21, "class", "step");
            __builder.AddMarkupContent(22, "\r\n                ");
            __builder.OpenElement(23, "div");
            __builder.AddAttribute(24, "class", "stepTime");
            __builder.AddMarkupContent(25, "\r\n                    ");
            __builder.OpenElement(26, "input");
            __builder.AddAttribute(27, "class", "inp");
            __builder.AddAttribute(28, "type", "number");
            __builder.AddAttribute(29, "value", 
#nullable restore
#line 25 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                             CurrentPhaseSteps[i].CurrentMinutes

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(30, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 25 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                                                               e => CurrentPhaseSteps[iCopy].CurrentMinutes = int.Parse(e.Value.ToString())

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(31, "\r\n                    ");
            __builder.AddMarkupContent(32, "<p> min</p>\r\n                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(33, "\r\n                ");
            __builder.OpenElement(34, "div");
            __builder.AddAttribute(35, "class", "stepSpeed");
            __builder.AddMarkupContent(36, "\r\n                    ");
            __builder.OpenElement(37, "input");
            __builder.AddAttribute(38, "class", "inp");
            __builder.AddAttribute(39, "type", "number");
            __builder.AddAttribute(40, "value", 
#nullable restore
#line 29 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                             CurrentPhaseSteps[i].CurrentSpeed

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(41, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 29 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                                                             e => CurrentPhaseSteps[iCopy].CurrentSpeed = int.Parse(e.Value.ToString())

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.AddMarkupContent(42, "\r\n                    ");
            __builder.AddMarkupContent(43, "<p> km/h</p>\r\n                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(44, "\r\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(45, "\r\n");
#nullable restore
#line 33 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
        }

#line default
#line hidden
#nullable disable
            __builder.AddContent(46, "    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(47, "\r\n");
            __builder.AddContent(48, "    ");
            __builder.OpenElement(49, "div");
            __builder.AddAttribute(50, "class", "phaseInfos");
            __builder.AddMarkupContent(51, "\r\n        ");
            __builder.AddMarkupContent(52, "<p><strong>Current phase : </strong> </p>\r\n        ");
            __builder.OpenElement(53, "p");
            __builder.AddContent(54, 
#nullable restore
#line 38 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
            CurrentPhaseTime.ToString()

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(55, " minutes ");
            __builder.CloseElement();
            __builder.AddMarkupContent(56, "\r\n        ");
            __builder.AddMarkupContent(57, "<p>-</p>\r\n        ");
            __builder.OpenElement(58, "p");
            __builder.AddContent(59, 
#nullable restore
#line 40 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
            Math.Round(CurrentPhaseDistance, 2).ToString()

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(60, " kms");
            __builder.CloseElement();
            __builder.AddMarkupContent(61, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(62, "\r\n");
            __builder.AddContent(63, "    ");
            __builder.OpenElement(64, "div");
            __builder.AddAttribute(65, "class", "phaseInfos");
            __builder.AddMarkupContent(66, "\r\n        ");
            __builder.AddMarkupContent(67, "<p><strong>Total : </strong> </p>\r\n        ");
            __builder.OpenElement(68, "p");
            __builder.AddContent(69, 
#nullable restore
#line 45 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
            TotalTime.ToString()

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(70, " minutes ");
            __builder.CloseElement();
            __builder.AddMarkupContent(71, "\r\n        ");
            __builder.AddMarkupContent(72, "<p>-</p>\r\n        ");
            __builder.OpenElement(73, "p");
            __builder.AddContent(74, 
#nullable restore
#line 47 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
            Math.Round(TotalDistance, 2).ToString()

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(75, " kms ");
            __builder.CloseElement();
            __builder.AddMarkupContent(76, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(77, "\r\n");
            __builder.AddContent(78, "    ");
            __builder.OpenElement(79, "div");
            __builder.AddAttribute(80, "class", "buttons");
            __builder.AddMarkupContent(81, "\r\n        ");
            __builder.OpenElement(82, "button");
            __builder.AddAttribute(83, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 51 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                          PreviousPhase

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(84, "class", "PhaseChangeButton");
            __builder.AddContent(85, " ");
            __builder.AddContent(86, 
#nullable restore
#line 51 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                     PreviousPhaseString

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(87, " ");
            __builder.CloseElement();
            __builder.AddMarkupContent(88, "\r\n        ");
            __builder.OpenElement(89, "button");
            __builder.AddAttribute(90, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 52 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                          AddStep

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(91, "class", "AddRemoveStepButton AddStepButton");
            __builder.AddContent(92, "Add Step");
            __builder.CloseElement();
            __builder.AddMarkupContent(93, "\r\n        ");
            __builder.OpenElement(94, "button");
            __builder.AddAttribute(95, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 53 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                          RemoveStep

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(96, "class", "AddRemoveStepButton RemoveStepButton");
            __builder.AddContent(97, "Remove Step");
            __builder.CloseElement();
            __builder.AddMarkupContent(98, "\r\n        ");
            __builder.OpenElement(99, "button");
            __builder.AddAttribute(100, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 54 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                          NextPhase

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(101, "class", "PhaseChangeButton");
            __builder.AddContent(102, " ");
            __builder.AddContent(103, 
#nullable restore
#line 54 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                 NextPhaseString

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(104, " ");
            __builder.CloseElement();
            __builder.AddMarkupContent(105, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(106, "\r\n");
#nullable restore
#line 56 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"

}

else if (phase == 3)
{


#line default
#line hidden
#nullable disable
            __builder.AddContent(107, "    ");
            __builder.OpenElement(108, "div");
            __builder.AddAttribute(109, "class", "timer");
            __builder.AddMarkupContent(110, "\r\n        ");
            __builder.OpenElement(111, "div");
            __builder.AddAttribute(112, "class", "currentStep");
            __builder.AddMarkupContent(113, "\r\n            ");
            __builder.OpenElement(114, "p");
            __builder.AddContent(115, 
#nullable restore
#line 64 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                CurrentStepTimerDisplayString

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(116, "\r\n            ");
            __builder.OpenElement(117, "p");
            __builder.AddContent(118, 
#nullable restore
#line 65 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                CurrentStepSpeed

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(119, " km/h");
            __builder.CloseElement();
            __builder.AddMarkupContent(120, "\r\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(121, "\r\n        \r\n        ");
            __builder.OpenElement(122, "div");
            __builder.AddAttribute(123, "class", "nextStep");
            __builder.AddMarkupContent(124, "\r\n            ");
            __builder.OpenElement(125, "p");
            __builder.AddContent(126, 
#nullable restore
#line 69 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                NextStepTimerDisplayString

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(127, "\r\n            ");
            __builder.OpenElement(128, "p");
            __builder.AddContent(129, 
#nullable restore
#line 70 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                NextStepSpeed

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(130, " km/h");
            __builder.CloseElement();
            __builder.AddMarkupContent(131, "\r\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(132, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(133, "\r\n");
            __builder.AddContent(134, "    ");
            __builder.OpenElement(135, "div");
            __builder.AddAttribute(136, "class", "buttons");
            __builder.AddMarkupContent(137, "\r\n        ");
            __builder.OpenElement(138, "button");
            __builder.AddAttribute(139, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 76 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                          PreviousPhase

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(140, "class", "PhaseChangeButton");
            __builder.AddContent(141, 
#nullable restore
#line 76 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                                    PreviousPhaseString

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(142, "\r\n        ");
            __builder.OpenElement(143, "button");
            __builder.AddAttribute(144, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 77 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                          StartStop

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(145, "class", "StartStopButton");
            __builder.AddContent(146, 
#nullable restore
#line 77 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                               aTimer.Enabled ? "Stop" : "Start"

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(147, "\r\n        ");
            __builder.OpenElement(148, "img");
            __builder.AddAttribute(149, "src", "/assets/replay.png");
            __builder.AddAttribute(150, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 78 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                                                ResetTimer

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(151, "class", "ResetImg");
            __builder.CloseElement();
            __builder.AddMarkupContent(152, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(153, "\r\n");
#nullable restore
#line 80 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
}

else if (phase == 4)
{

#line default
#line hidden
#nullable disable
            __builder.AddContent(154, "    ");
            __builder.OpenElement(155, "button");
            __builder.AddAttribute(156, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 84 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
                      PreviousPhase

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(157, "Back");
            __builder.CloseElement();
            __builder.AddMarkupContent(158, "\r\n");
#nullable restore
#line 85 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
#nullable restore
#line 91 "C:\Users\lione\Desktop\Side Projects\Interval_Training\Pages\Index.razor"
       

    string PreviousPhaseString = "<";
    string NextPhaseString = ">";

    // All infos needed for displaying timer 
    int CurrentStepIndex = -1;
    int CurrentStepSeconds;
    int CurrentStepSpeed;
    int NextStepSeconds;
    int NextStepSpeed;
    string CurrentStepTimerDisplayString
    {
        get
        {
            TimeSpan time = TimeSpan.FromSeconds(CurrentStepSeconds);

            //here backslash is must to tell that colon is
            //not the part of format, it just a character that we want in output
            return time.ToString(@"mm\:ss");
        }
    }
    string NextStepTimerDisplayString
    {
        get
        {
            TimeSpan time = TimeSpan.FromSeconds(NextStepSeconds);

            //here backslash is must to tell that colon is
            //not the part of format, it just a character that we want in output
            return time.ToString(@"mm\:ss");
        }
    }

    int phase = 0; // 0 warmup - 1 training - 2 cooling - 3 IN PROGRESS - 4 Training complete
    string CurrentPhaseTitle
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return "Warmup steps";
                case 1:
                    return "Training steps";
                case 2:
                    return "Cooling steps";
                case 3:
                    return "Training";
                case 4:
                    return "It's over. Well done.";
                default:
                    return "";
            }
        }
    }

    int TotalTime
    {
        get
        {
            return WarmupTime + TrainingTime + CoolingTime;
        }
    }
    Double TotalDistance
    {
        get
        {
            return WarmupDistance + TrainingDistance + CoolingDistance;
        }
    }
    List<Step> AllSteps
    {
        get
        {
            List<Step> warmupSteps = new List<Step>();
            List<Step> trainingSteps = new List<Step>();
            List<Step> coolingSteps = new List<Step>();
            List<Step> allSteps = new List<Step>();

            allSteps.Add(WarmupSteps[0]);

            for (int i = 1; i < WarmupSteps.Count; i++)
            {
                int currentCounter = WarmupStepReps[i - 1].reps;
                while (currentCounter != 0)
                {
                    allSteps.Add(WarmupSteps[i]);
                    currentCounter--;

                    if (currentCounter != 0)
                    {
                        allSteps.Add(WarmupSteps[i - 1]);
                    }
                }
            } // add all warmup steps

            allSteps.Add(TrainingSteps[0]);

            for (int i = 1; i < TrainingSteps.Count; i++)
            {
                int currentCounter = TrainingStepReps[i - 1].reps;
                while (currentCounter != 0)
                {
                    allSteps.Add(TrainingSteps[i]);
                    currentCounter--;

                    if (currentCounter != 0)
                    {
                        allSteps.Add(TrainingSteps[i - 1]);
                    }
                }
            } // add all training steps

            allSteps.Add(CoolingSteps[0]);

            for (int i = 1; i < CoolingSteps.Count; i++)
            {
                int currentCounter = CoolingStepReps[i - 1].reps;
                while (currentCounter != 0)
                {
                    allSteps.Add(CoolingSteps[i]);
                    currentCounter--;

                    if (currentCounter != 0)
                    {
                        allSteps.Add(CoolingSteps[i - 1]);
                    }
                }
            } // add all cooling steps

            return allSteps;

        }
    }

    List<Step> WarmupSteps = new List<Step>() { new Step() };
    List<StepRep> WarmupStepReps = new List<StepRep>() { };
    int WarmupTime
    {
        get
        {


            if (WarmupSteps.Count == 1 || WarmupStepReps.Count == 0)
            {
                return WarmupSteps[0].CurrentMinutes;
            }

            int total = WarmupSteps[0].CurrentMinutes * WarmupStepReps[0].reps;

            for (int i = 1; i < WarmupSteps.Count; i++)
            {
                total += WarmupSteps[i].CurrentMinutes * WarmupStepReps[i - 1].reps;
            }
            return total;

        }
    }
    Double WarmupDistance
    {
        get
        {
            if (WarmupSteps.Count == 1 || WarmupStepReps.Count == 0)
            {
                return ((double)WarmupSteps[0].CurrentSpeed / 60.0) * WarmupSteps[0].CurrentMinutes;
            }

            Double total = (double)((double)(WarmupSteps[0].CurrentSpeed / 60.0) * (double)WarmupSteps[0].CurrentMinutes) * (double)WarmupStepReps[0].reps;

            for (int i = 1; i < WarmupSteps.Count; i++)
            {
                total += (double)((double)(WarmupSteps[i].CurrentSpeed / 60.0) * (double)WarmupSteps[i].CurrentMinutes) * (double)WarmupStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> TrainingSteps = new List<Step>() { new Step() };
    List<StepRep> TrainingStepReps = new List<StepRep>() { };
    int TrainingTime
    {
        get
        {
            if (TrainingSteps.Count == 1 || TrainingStepReps.Count == 0)
            {
                return TrainingSteps[0].CurrentMinutes;
            }

            int total = TrainingSteps[0].CurrentMinutes * TrainingStepReps[0].reps;

            for (int i = 1; i < TrainingSteps.Count; i++)
            {
                total += TrainingSteps[i].CurrentMinutes * TrainingStepReps[i - 1].reps;
            }
            return total;
        }
    }
    Double TrainingDistance
    {
        get
        {
            if (TrainingSteps.Count == 1 || TrainingStepReps.Count == 0)
            {
                return ((double)TrainingSteps[0].CurrentSpeed / 60.0) * TrainingSteps[0].CurrentMinutes;
            }

            Double total = (double)((double)(TrainingSteps[0].CurrentSpeed / 60.0) * (double)TrainingSteps[0].CurrentMinutes) * (double)TrainingStepReps[0].reps;

            for (int i = 1; i < TrainingSteps.Count; i++)
            {
                total += (double)((double)(TrainingSteps[i].CurrentSpeed / 60.0) * (double)TrainingSteps[i].CurrentMinutes) * (double)TrainingStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> CoolingSteps = new List<Step>() { new Step() };
    List<StepRep> CoolingStepReps = new List<StepRep>() { };
    int CoolingTime
    {
        get
        {
            if (CoolingSteps.Count == 1 || CoolingStepReps.Count == 0)
            {
                return CoolingSteps[0].CurrentMinutes;
            }

            int total = CoolingSteps[0].CurrentMinutes * CoolingStepReps[0].reps;

            for (int i = 1; i < CoolingSteps.Count; i++)
            {
                total += CoolingSteps[i].CurrentMinutes * CoolingStepReps[i - 1].reps;
            }
            return total;
        }
    }
    Double CoolingDistance
    {
        get
        {
            if (CoolingSteps.Count == 1 || CoolingStepReps.Count == 0)
            {
                return ((double)CoolingSteps[0].CurrentSpeed / 60.0) * CoolingSteps[0].CurrentMinutes;
            }

            Double total = (double)((double)(CoolingSteps[0].CurrentSpeed / 60.0) * (double)CoolingSteps[0].CurrentMinutes) * (double)CoolingStepReps[0].reps;

            for (int i = 1; i < CoolingSteps.Count; i++)
            {
                total += (double)((double)(CoolingSteps[i].CurrentSpeed / 60.0) * (double)CoolingSteps[i].CurrentMinutes) * (double)CoolingStepReps[i - 1].reps;
            }
            return total;
        }
    }

    List<Step> CurrentPhaseSteps
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupSteps;
                case 1:
                    return TrainingSteps;
                case 2:
                    return CoolingSteps;
                default:
                    return WarmupSteps;
            }
        }
    }
    List<StepRep> CurrentPhaseStepReps
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupStepReps;
                case 1:
                    return TrainingStepReps;
                case 2:
                    return CoolingStepReps;
                default:
                    return WarmupStepReps;
            }
        }
    }
    int CurrentPhaseTime
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupTime;
                case 1:
                    return TrainingTime;
                case 2:
                    return CoolingTime;
                default:
                    return WarmupTime;
            }
        }
    }
    Double CurrentPhaseDistance
    {
        get
        {
            switch (phase)
            {
                case 0:
                    return WarmupDistance;
                case 1:
                    return TrainingDistance;
                case 2:
                    return CoolingDistance;
                default:
                    return WarmupDistance;
            }
        }
    }

    private void AddStep()
    {

        switch (phase)
        {
            case 0:
                WarmupSteps.Add(new Step());
                WarmupStepReps.Add(new StepRep());
                break;
            case 1:
                TrainingSteps.Add(new Step());
                TrainingStepReps.Add(new StepRep());
                break;
            case 2:
                CoolingSteps.Add(new Step());
                CoolingStepReps.Add(new StepRep());
                break;
            default:
                break;
        }

    }
    private void RemoveStep()
    {
        switch (phase)
        {
            case 0:
                if (WarmupSteps.Count != 1)
                {
                    WarmupSteps.RemoveAt(WarmupSteps.Count - 1);
                    WarmupStepReps.RemoveAt(WarmupStepReps.Count - 1);
                }
                break;
            case 1:
                if (TrainingSteps.Count != 1)
                {
                    TrainingSteps.RemoveAt(TrainingSteps.Count - 1);
                    TrainingStepReps.RemoveAt(TrainingStepReps.Count - 1);
                }
                break;
            case 2:
                if (CoolingSteps.Count != 1)
                {
                    CoolingSteps.RemoveAt(CoolingSteps.Count - 1);
                    CoolingStepReps.RemoveAt(CoolingStepReps.Count - 1);
                }
                break;
            default:
                break;
        }
    }
    private void PreviousPhase()
    {
        if (phase != 0)
        {
            phase--;
        }
    }
    private void NextPhase()
    {
        if (phase != 4)
        {
            phase++;
        }
    }

    // Timer creation, initialization and updates
    System.Timers.Timer aTimer = new System.Timers.Timer();
    protected override void OnInitialized()
    {
        aTimer.Elapsed += new ElapsedEventHandler(UpdateTimer);
        aTimer.Interval = 1000;

    }
    bool TimerIsOver = false;
    private void StartStop()
    {

        if (TimerIsOver)
        {
            TimerIsOver = false;
            ResetTimer();
            aTimer.Enabled = true;
            this.StateHasChanged();
        }
        else
        {
            aTimer.Enabled = !aTimer.Enabled;
            this.StateHasChanged();
        }

    }
    private void ResetTimer()
    {
        CurrentStepIndex = 0;
        CurrentStepSeconds = AllSteps[0].CurrentMinutes * 60;
        CurrentStepSpeed = AllSteps[0].CurrentSpeed;

        NextStepSeconds = AllSteps[1].CurrentMinutes * 60;
        NextStepSpeed = AllSteps[1].CurrentSpeed;
    }
    private void UpdateTimer(object source, ElapsedEventArgs e)
    {
        if (CurrentStepIndex == -1) // initialize
        {
            ResetTimer();
        }

        else
        {
            if (CurrentStepSeconds == 0)
            {

                if (CurrentStepIndex == AllSteps.Count - 1)
                {
                    TimerIsOver = true;
                    phase++;
                    aTimer.Enabled = !aTimer.Enabled;
                    this.StateHasChanged();

                } else
                {
                    CurrentStepIndex++;
                    CurrentStepSeconds = AllSteps[CurrentStepIndex].CurrentMinutes * 60;
                    CurrentStepSpeed = AllSteps[CurrentStepIndex].CurrentSpeed;

                    NextStepSeconds = AllSteps[CurrentStepIndex + 1].CurrentMinutes * 60;
                    NextStepSpeed = AllSteps[CurrentStepIndex + 1].CurrentSpeed;
                }


            }

            else
            {
                CurrentStepSeconds--;
            }
        }

        this.StateHasChanged();
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
